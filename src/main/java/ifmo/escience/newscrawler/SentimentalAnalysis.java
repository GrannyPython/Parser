package ifmo.escience.newscrawler;


import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.IOException;
import java.net.MalformedURLException;

/**
 * Created by Easton
 * on 06.12.2015.
 */
public class SentimentalAnalysis {

    private static final String url = "http://gateway-a.watsonplatform.net/calls/text/TextGetTextSentiment";
    private static final String apiKey = "7bb5d7dbf759e3d7a9ee7bf9fca18e3c240c2d55";

    private int amountOfPositiveNews = 0;
    private int amountOfNegativeNews = 0;
    private int amountOfProcessedNews = 0;

    //alchemyapi.com
    public static String checkViaAlchemy(String text) {
        String requestString = url + "?apikey=" + apiKey + "&text=" + text + "&outputMode=json";
        try {
            Document response = Jsoup.connect(requestString).ignoreContentType(true).get();
            String eraseRegex = "<[a-zA-Z\\/][^>]*>";
            String result = response.toString();
            result = result.replaceAll(eraseRegex, "");

            System.out.println(result);

            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(result);
            String score = root.path("docSentiment").path("score").toString();
            score = score.substring(1, score.length() - 1); //Jackson's toString output is a little bit strange
            String type = root.path("docSentiment").path("type").toString();
            type = type.substring(1, type.length() - 1);
            /*if (type.contains("negative")) {
                amountOfNegativeNews++;
            } else amountOfPositiveNews++;
            amountOfProcessedNews++;*/
            System.out.println(result + score + " " + type);
            if (score.length() == 0) {
                return "0";
            } else return score;

        } catch (MalformedURLException e) {
            e.printStackTrace();
            System.out.println(requestString);
            return "0";
        }
        catch (StringIndexOutOfBoundsException e) {
            e.printStackTrace();
            return "0";
        }
        catch (IOException e) {
            e.printStackTrace();
            return "0";
        }
    }

    private void addSentimentInfoToDB(String score) {


    }

    public static void main(String[] args) {
        SentimentalAnalysis sa = new SentimentalAnalysis();
        String str =
                "http://gateway-a.watsonplatform.net/calls/text/TextGetTextSentiment?apikey=7bb5d7dbf759e3d7a9ee7bf9fca18e3c240c2d55&text= \n" +
                        " –ú–æ—?–∫–≤–∞. 8 –¥–µ–∫–∞–±—Ä—?. INTERFAX.RU - –ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä –°–µ–≤–∞—?—Ç–æ–ø–æ–ª—? –°–µ—Ä–≥–µ–π –ú–µ–Ω—?–π–ª–æ —Ä–∞—?–ø–æ—Ä—?–¥–∏–ª—?—? —?–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞, 8 –¥–µ–∫–∞–±—Ä—?, –Ω–∞—á–∞—Ç—å –ø–æ—?—Ç–∞–ø–Ω–æ –≤–æ—?—?—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–µ—Ä–≤–∞–Ω–Ω—É—é –∏–∑-–∑–∞ –ß–° –Ω–∞ –ö—Ä—ã–º—?–∫–æ–º –ø–æ–ª—É–æ—?—Ç—Ä–æ–≤–µ —Ä–∞–±–æ—Ç—É –¥–µ—Ç—?–∫–∏—Ö —?–∞–¥–æ–≤ –∏ –≤—ã–ø—É—?–∫–∞—Ç—å –Ω–∞ —É–ª–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ —á–∞—?—Ç—å —Ç—Ä–æ–ª–ª–µ–π–±—É—?–æ–≤, —?–æ–æ–±—â–∏–ª–∞ –ø—Ä–µ—?—?-—?–ª—É–∂–±–∞ —?–µ–≤–∞—?—Ç–æ–ø–æ–ª—å—?–∫–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—?—Ç–≤–∞. \n" +
                        " –ü–æ —?–æ—?—Ç–æ—?–Ω–∏—é –Ω–∞ –≤–µ—á–µ—Ä 7 –¥–µ–∫–∞–±—Ä—? –°–µ–≤–∞—?—Ç–æ–ø–æ–ª—é —É—?—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç —?–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—? –≤ 165 –ú–í—Ç. –≠—Ç–æ –±–µ–∑ —É—á–µ—Ç–∞ —?–æ–±—?—Ç–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —?–ª–µ–∫—Ç—Ä–æ—?–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä—É—é –¥–∞—é—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –±–æ–ª—å—à–æ–π –º–æ—â–Ω–æ—?—Ç–∏. –í—?–µ –∫–æ—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç. \n" +
                        " \"–í —?–æ–æ—Ç–≤–µ—Ç—?—Ç–≤–∏–∏ —? —Ä–µ—à–µ–Ω–∏–µ–º –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–∞ –ú–µ–Ω—?–π–ª–æ –¥–æ —É—Ç—Ä–∞ 8 –¥–µ–∫–∞–±—Ä—? –¥–µ—Ç—?–∫–∏–µ —?–∞–¥—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞ –±—É–¥—É—Ç –æ–±–µ—?–ø–µ—á–µ–Ω—ã —?–ª–µ–∫—Ç—Ä–æ—?–Ω–µ—Ä–≥–∏–µ–π. –ü–æ—?–ª–µ –º—ã —?–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –∏–º–µ—é—â–∏–π—?—? –ª–∏–º–∏—Ç. –¢–∞–∫–∂–µ –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–æ —É–∫–∞–∑–∞–Ω–∏–µ –≤—ã–≤–µ—?—Ç–∏ –Ω–∞ —?–æ—Ü–∏–∞–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—?—Ç–≤–æ —Ç—Ä–æ–ª–ª–µ–π–±—É—?–æ–≤. –ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥–∞—á–∏ —?–ª–µ–∫—Ç—Ä–æ—?–Ω–µ—Ä–≥–∏–∏ –ø–æ —Ä–∞–π–æ–Ω–∞–º –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ –º–µ–Ω—?–µ—Ç—?—?, —Ä–µ—à–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—?—Ç–æ –ø–æ—?–ª–µ –æ–±–µ—?–ø–µ—á–µ–Ω–∏—? –¥–µ—Ç—?–∫–∏—Ö —?–∞–¥–æ–≤ –∏ –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—? —Ç—Ä–æ–ª–ª–µ–π–±—É—?–æ–≤, –æ—?–Ω–æ–≤—ã–≤–∞—?—?—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö —?–Ω–µ—Ä–≥–æ–±–∞–ª–∞–Ω—?–∞\", - —Ü–∏—Ç–∏—Ä—É—é—Ç—?—? –≤ —?–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–µ—?—?-—?–ª—É–∂–±—ã —?–ª–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –≥–æ—Ä–æ–¥—?–∫–æ–≥–æ —Ö–æ–∑—?–π—?—Ç–≤–∞ –°–µ–≤–∞—?—Ç–æ–ø–æ–ª—? –û–ª–µ–≥–∞ –ö–∞–∑—É—Ä–∏–Ω–∞. \n" +
                        " –ü–æ—?–ª–µ –∑–∞–ø—É—?–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —?–æ—Ü–∏–∞–ª—å–Ω–æ–π —?—Ñ–µ—Ä—ã –°–µ–≤–∞—?—Ç–æ–ø–æ–ª—? –±—É–¥–µ—Ç —Ä–∞—?—?–º–æ—Ç—Ä–µ–Ω –≤–æ–ø—Ä–æ—? –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—? –ø–æ –ø–æ—?—Ç–æ—?–Ω–Ω–æ–π —?—Ö–µ–º–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—?—Ç–∏–π –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—?—Ç–≤—É—é—Ç –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≥–æ—?—É–¥–∞—Ä—?—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞. –ò–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2,2 –ú–í—Ç. \n" +
                        " –ö—Ä—ã–º—?–∫–∏–π –ø–æ–ª—É–æ—?—Ç—Ä–æ–≤ –±—ã–ª –ø–æ–ª–Ω–æ—?—Ç—å—é –æ–±–µ—?—Ç–æ—á–µ–Ω –≤ –Ω–æ—á—å –Ω–∞ 22 –Ω–æ—?–±—Ä—? –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–¥—Ä—ã–≤–∞ –¥–≤—É—Ö –æ–ø–æ—Ä –õ–≠–ü, –∏–¥—É—â–∏—Ö –∏–∑ –£–∫—Ä–∞–∏–Ω—ã. –°–µ–π—á–∞—? —?–Ω–µ—Ä–≥–æ—?–∏—?—Ç–µ–º–∞ —Ä–µ–≥–∏–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ, –¥–ª—? —?–∫–æ–Ω–æ–º–∏–∏ –ø—Ä–∏–º–µ–Ω—?—é—Ç—?—? –≤–µ–µ—Ä–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—?. \n" +
                        " –í–µ—á–µ—Ä–æ–º 2 –¥–µ–∫–∞–±—Ä—? –ø–æ–ª—É–æ—?—Ç—Ä–æ–≤ –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–≤—É—é —?–ª–µ–∫—Ç—Ä–æ—?–Ω–µ—Ä–≥–∏—é —? —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—?—?–∏–∏. –í —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –æ–ø–µ—Ä–µ–∂–∞—é—â–µ–≥–æ –∑–∞–ø—É—?–∫–∞ –ø–µ—Ä–≤–æ–π —Ü–µ–ø–∏ –ø–æ–¥–≤–æ–¥–Ω–æ–≥–æ —?–Ω–µ—Ä–≥–æ–º–æ—?—Ç–∞ —á–µ—Ä–µ–∑ –ö–µ—Ä—á–µ–Ω—?–∫–∏–π –ø—Ä–æ–ª–∏–≤ –ø—Ä–∏–Ω—?–ª —É—á–∞—?—Ç–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–§ –í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω. \n" +
                        "&outputMode=json ";
        sa.checkViaAlchemy(str);
    }
}
